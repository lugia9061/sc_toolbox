function h=mark_electrodes_cont(subject_name,dataroute,channel_list,channel_values,montage)
%mark_electrodes(mapfile,locfile,channel_list)
%Mark the significant channels on a surface map(generated by freesurfer)
%Mark them with continuous color representating siginificance

%channel_values must be within [0,1]

% Revised from ZhengXiao's mapping_system by Chen Song, 2013-7-9

locfile=[dataroute,subject_name,'_surface_loc_new01.mat'];
mapfile=[dataroute,subject_name,'_surface_new01.png'];

diameter=15;

load(locfile);   %name 'loc' and saved in acquire_loc.m
skull=imread(mapfile);

switch montage
    case 1
        load('label_norm.mat');    %named label_norm, a constant list
        %usually locfile has the same order as 'label_norm' in sc_toolbox
        label_list=label_norm;
    case 2
        load('label_92.mat');  
        label_list=label_92;
    otherwise
        error('Montage not found!');
end

skull_cover=zeros(size(skull));

signif_chan=[];
for i=1:length(channel_list);
    switch montage
        case 1
             indx=find(strcmp(channel_list{i},label_norm));
        case 2
             indx=find(strcmp(channel_list{i},label_92));
    end
    signif_chan=[signif_chan,indx];
end
for ii=1:length(signif_chan)
    fff=signif_chan(ii);
%     skull_cover(loc(fff,2)-9:loc(fff,2)+9,loc(fff,1)-9:loc(fff,1)+9,1)=channel_values(ii)+0.001;   %incase the parameter==0, transparent
%     skull_cover(loc(fff,2)-9:loc(fff,2)+9,loc(fff,1)-9:loc(fff,1)+9,2)=0;
%     skull_cover(loc(fff,2)-9:loc(fff,2)+9,loc(fff,1)-9:loc(fff,1)+9,3)=0;
    
%         for t=1:(diameter+2)
%              m=round(sqrt((diameter+4).^2-t.^2));
%              skull(loc(fff,2)-t:loc(fff,2)+t,loc(fff,1)-m:loc(fff,1)+m,1)=colorset(4,1);
%              skull(loc(fff,2)-t:loc(fff,2)+t,loc(fff,1)-m:loc(fff,1)+m,2)=colorset(4,2);
%              skull(loc(fff,2)-t:loc(fff,2)+t,loc(fff,1)-m:loc(fff,1)+m,3)=colorset(4,3);
%          end
         for t=1:diameter
            m=round(sqrt(diameter.^2-t.^2));
            skull_cover(loc(fff,2)-t:loc(fff,2)+t,loc(fff,1)-m:loc(fff,1)+m,1)=channel_values(ii)+0.001;   %incase the parameter==0, transparent
            skull_cover(loc(fff,2)-t:loc(fff,2)+t,loc(fff,1)-m:loc(fff,1)+m,2)=0;
            skull_cover(loc(fff,2)-t:loc(fff,2)+t,loc(fff,1)-m:loc(fff,1)+m,3)=0;
         end
end

trans_mat=(squeeze(skull_cover(:,:,1))~=0);  %use R dimension as transparency def
h=figure;
image(skull);hold on;axis off;axis equal;
image_values=imagesc(squeeze(skull_cover(:,:,1)),'AlphaData',trans_mat);
colormap hot;
set(gca,'CLim',[0,1],'CLimMode','manual');

