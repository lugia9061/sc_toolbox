%DESERTED
function [TFRhann,dataone]=tfanalysis_ft(datasingle,cfg)
%Time-Frequency analysis for any signal using fieldtrip
%INPUT:
%datasingle: single channel data with fieldtrip structure
%cfg: configuration variable for TFanalysis, see introduction by fieldtrip

%OUTPUT:
%m_plotmatrix: extracted envelope of raw data, trials*frames
%TFRhann: powerspectrum
%dataone: statistical powerspectrum, generated by ttest

TFRhann = ft_freqanalysis(cfg, datasingle);
if sum(isnan(TFRhann.powspctrm(1,1,:,:)))
   error('Processing time window is out of data range')  %if there is NaN in powerspectrum, report error
end 

%Use ft_singleplot to visualize   NOT READY
cfg = [];
cfg.baseline = 'no';
cfg.baselinetype = 'absolute';  %minus baseline
cfg.channel = TFRhann.label{1};
% cfg.zlim =[-3 3];
% figure
% ft_singleplotTFR(cfg,TFRhann);


dataone=TFRhann;
base_t=find(dataone.time<0 & dataone.time>-0.1);    %[-1 0] baseline
%paired t-test for every TF bin
for k=1:length(dataone.freq)
    for m=1:length(dataone.time)
        tf_bin=squeeze(dataone.powspctrm(:,1,k,m));
        base_bin=squeeze(mean(dataone.powspctrm(:,1,k,base_t),4));
        [h,p,ci,stats]=ttest2(tf_bin,base_bin);
        t_stats(1,k,m)=stats.tstat;
%         [h p]=ttest(tf_bin,base_bin);
%         t_stats(1,k,m)=(-log10(p))*sign(mean(tf_bin)-mean(base_bin));    %transform p-value for plotting
    end
end

%fill the stats into a fake data structure for visualization
dataone.powspctrm=t_stats;      
dataone.dimord='chan_freq_time';
dataone.cfg.keeptrials='no';